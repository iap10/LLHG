# -*- coding: utf-8 -*-
"""test1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rzxiR351qyn4I3ZtARVb0Oamm2F5vFKB
"""

!pip install pandas
import pandas as pd
import random
import time
from datetime import datetime, timedelta

# 상태 누적 FSM 클래스
class RealisticAttentionFSM:
    def __init__(self):
        self.state = "주의 필요"
        self.eye_closed_start = None
        self.face_lost_start = None
        self.yaw_pitch_history = []
        self.focus_start = None
        self.prev_time = datetime.now()

    def update(self, yaw, pitch, EAR, blink_count, eye_closed, face_detected, movement, hand_output):
        now = datetime.now()

        # 졸음 감지용: eye_closed + pitch
        if eye_closed and pitch > 20:
            if not self.eye_closed_start:
                self.eye_closed_start = now
            elif (now - self.eye_closed_start).total_seconds() >= 1.5:
                return "졸음"
        else:
            self.eye_closed_start = None

        # 무반응 감지용
        if not face_detected or not movement:
            if not self.face_lost_start:
                self.face_lost_start = now
            elif (now - self.face_lost_start).total_seconds() >= 10.0:
                return "무반응"
        else:
            self.face_lost_start = None

        # 산만 감지: yaw/pitch 과도 변화 ≥ 3회/10초
        self.yaw_pitch_history.append((now, yaw, pitch))
        self.yaw_pitch_history = [entry for entry in self.yaw_pitch_history if (now - entry[0]).total_seconds() <= 10]
        change_count = sum(abs(y) > 30 or abs(p) > 30 for _, y, p in self.yaw_pitch_history)
        if change_count >= 3 or hand_output == 1:
            return "산만"

        # 집중 상태: 조건 지속 시간 확인
        if abs(yaw) <= 25 and EAR > 0.23 and 10 <= blink_count <= 25 and hand_output in [0, 2]:
            if not self.focus_start:
                self.focus_start = now
            elif (now - self.focus_start).total_seconds() >= 5.0:
                return "집중"
        else:
            self.focus_start = None

        # 기본값
        return "주의 필요"

# 샘플 입력 생성기
def get_sample_input(sim_state):
    if sim_state == "focus":
        return {
            "yaw": random.uniform(-10, 10),
            "pitch": random.uniform(-5, 5),
            "EAR": random.uniform(0.24, 0.28),
            "blink_count": random.randint(15, 25),
            "eye_closed": False,
            "face_detected": True,
            "movement": True,
            "hand_output": 2  # pen
        }
    elif sim_state == "distracted":
        return {
            "yaw": random.choice([50, -55, 60]),
            "pitch": random.uniform(-10, 10),
            "EAR": random.uniform(0.22, 0.26),
            "blink_count": random.randint(30, 40),
            "eye_closed": False,
            "face_detected": True,
            "movement": True,
            "hand_output": 1  # smartphone
        }
    elif sim_state == "drowsy":
        return {
            "yaw": random.uniform(-5, 5),
            "pitch": random.uniform(25, 35),
            "EAR": random.uniform(0.1, 0.17),
            "blink_count": random.randint(0, 3),
            "eye_closed": True,
            "face_detected": True,
            "movement": True,
            "hand_output": 0
        }
    elif sim_state == "unresponsive":
        return {
            "yaw": 0,
            "pitch": 0,
            "EAR": 0.1,
            "blink_count": 0,
            "eye_closed": True,
            "face_detected": False,
            "movement": False,
            "hand_output": 0
        }
    else:
        return get_sample_input(random.choice(["focus", "distracted", "drowsy", "unresponsive"]))

# 시뮬레이션
fsm = RealisticAttentionFSM()
scenario = ["focus"] * 30 + ["distracted"] * 10 + ["drowsy"] * 10 + ["unresponsive"] * 5
log = []

for sim_state in scenario:
    data = get_sample_input(sim_state)
    result = fsm.update(
        yaw=data["yaw"],
        pitch=data["pitch"],
        EAR=data["EAR"],
        blink_count=data["blink_count"],
        eye_closed=data["eye_closed"],
        face_detected=data["face_detected"],
        movement=data["movement"],
        hand_output=data["hand_output"]
    )

    log.append({
        "ground_truth": sim_state,
        "yaw": round(data["yaw"], 1),
        "pitch": round(data["pitch"], 1),
        "EAR": round(data["EAR"], 3),
        "blink_count": data["blink_count"],
        "eye_closed": data["eye_closed"],
        "face_detected": data["face_detected"],
        "movement": data["movement"],
        "hand_output": data["hand_output"],
        "predicted_state": result
    })
    time.sleep(0.2)

# 결과 출력
df = pd.DataFrame(log)
df.head(55)