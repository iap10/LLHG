# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GS5dJmRSon6gZnnG_Q3cDAWt_vgI1CQm
"""

import cv2
import numpy as np
import time

class VisualFeedbackModule:
    def __init__(self):
        self.prev_state = None
        self.last_state_change_time = time.time()
        self.alert_duration = {
            "drowsy": 2.0,
            "distracted": 1.0
        }

    def update(self, state):
        now = time.time()

        if state != self.prev_state:
            self.last_state_change_time = now
            self.prev_state = state

        duration = now - self.last_state_change_time

        if state == "drowsy" and duration >= self.alert_duration["drowsy"]:
            self.display_message("Drowsy! Please wake up!", (0, 0, 255))  # Red

        elif state == "distracted" and duration >= self.alert_duration["distracted"]:
            self.display_message("Distracted! Please focus.", (0, 165, 255))  # Orange

        elif state == "focus":
            self.display_message("Focused. Keep it up!", (0, 180, 0))  # Green

        elif state == "unresponsive":
            self.display_message("No user detected.", (128, 128, 128))  # Gray

        else:
            self.display_message(f"State: {state}", (100, 100, 100))

    def display_message(self, text, color=(0, 0, 0)):
        img = np.ones((720, 1280, 3), dtype=np.uint8) * 255
        cv2.putText(img, text, (80, 380), cv2.FONT_HERSHEY_SIMPLEX, 2, color, 5)
        cv2.namedWindow("Attention Status", cv2.WINDOW_NORMAL)
        cv2.setWindowProperty("Attention Status", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
        cv2.imshow("Attention Status", img)
        cv2.waitKey(1)

import numpy as np
import matplotlib.pyplot as plt
import time
from IPython.display import display, clear_output

class ColabVisualFeedback:
    def __init__(self):
        self.prev_state = None
        self.last_state_change_time = time.time()
        self.alert_duration = {
            "drowsy": 2.0,
            "distracted": 1.0
        }

    def update(self, state):
        now = time.time()
        if state != self.prev_state:
            self.last_state_change_time = now
            self.prev_state = state

        duration = now - self.last_state_change_time

        if state == "drowsy" and duration >= self.alert_duration["drowsy"]:
            self.display_message("Drowsy! Please wake up!", "red")
        elif state == "distracted" and duration >= self.alert_duration["distracted"]:
            self.display_message("Distracted! Please focus.", "orange")
        elif state == "focus":
            self.display_message("Focused. Keep it up!", "green")
        elif state == "unresponsive":
            self.display_message("No user detected.", "gray")
        else:
            self.display_message(f"State: {state}", "black")

    def display_message(self, text, color="black"):
        clear_output(wait=True)
        plt.figure(figsize=(10, 6))
        plt.text(0.5, 0.5, text, fontsize=28, ha='center', va='center', color=color)
        plt.axis('off')
        plt.show()

feedback = ColabVisualFeedback()

sample_states = [
    "focused", "focused", "focused",
    "distracted", "distracted",
    "drowsy", "drowsy", "drowsy",
    "unresponsive", "unresponsive",
    "focused"
]

for state in sample_states:
    feedback.update(state)
    time.sleep(1)